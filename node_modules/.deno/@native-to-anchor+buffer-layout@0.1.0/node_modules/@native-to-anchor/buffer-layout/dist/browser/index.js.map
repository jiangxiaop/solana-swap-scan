{"version":3,"file":"index.js","sources":["../../../../node_modules/@solana/buffer-layout/lib/Layout.js","../../../../node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs","../../../../node_modules/bigint-buffer/dist/browser.js","../../../../node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs","../../../../node_modules/bignumber.js/bignumber.mjs","../../../../node_modules/@solana/buffer-layout-utils/lib/esm/decimal.mjs","../../../../node_modules/@solana/buffer-layout-utils/lib/esm/native.mjs","../../../../node_modules/@solana/buffer-layout-utils/lib/esm/web3.mjs","../../../src/index.ts"],"sourcesContent":["/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","export const encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n//# sourceMappingURL=base.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map","/*\r\n *      bignumber.js v9.1.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","import BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base.mjs';\nimport { u128 } from './bigint.mjs';\nexport const WAD = new BigNumber('1e+18');\nexport const decimal = (property) => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n    const decimalLayout = layout;\n    decimalLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n    decimalLayout.encode = (decimal, buffer, offset) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n    return decimalLayout;\n};\n//# sourceMappingURL=decimal.js.map","import { u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base.mjs';\nexport const bool = (property) => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n    const boolLayout = layout;\n    boolLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n    boolLayout.encode = (bool, buffer, offset) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n    return boolLayout;\n};\n//# sourceMappingURL=native.js.map","import { blob } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base.mjs';\nexport const publicKey = (property) => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n    const publicKeyLayout = layout;\n    publicKeyLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n    publicKeyLayout.encode = (publicKey, buffer, offset) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n    return publicKeyLayout;\n};\n//# sourceMappingURL=web3.js.map",null],"names":["Object","defineProperty","Layout_1","value","s16","nu64be","u48be","u40be","u32be","u16be","nu64","u40","u32","u24","u16","u8","offset","greedy","Constant","UTF8","Blob","Boolean","BitStructure","VariantLayout","Union","UnionLayoutDiscriminator","Structure","Sequence","DoubleBE","Double","Float","NearInt64BE","NearUInt64BE","NearUInt64","IntBE","Int","UInt","OffsetLayout","GreedyCount","ExternalLayout","nameWithProperty","Layout","uint8ArrayToBuffer","checkUint8Array","constant","cstr","blob","unionLayoutDiscriminator","union","seq","bits","struct","f64","f32be","f32","ns64be","s40be","s32be","s24be","s16be","s48","s40","s32","s24","buffer_1","require$$0","b","Uint8Array","TypeError","Buffer","from","buffer","byteOffset","length","constructor","span","property","Number","isInteger","this","makeDestinationObject","getSpan","RangeError","replicate","rv","create","prototype","assign","fromArray","values","Layout_2","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","encode","writable","decode","isCount","elementSpan","super","rem","Math","floor","src","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","readIntLE","writeIntLE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","readUInt32LE","split","writeUInt32LE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","readInt32BE","writeInt32BE","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","readDoubleLE","writeDoubleLE","readDoubleBE","writeDoubleBE","elementLayout","count","idx","i","push","elo","reduce","v","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","vb","fixBitwiseResult","word","msb","_packedSetValue","_packedGetValue","addField","bf","BitField","addBoolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","slice","srcBuffer","write","toString","CString","String","srcb","copy","maxSpan","u48","u24be","s8","ns64","s48be","f64be","utf8","encodeDecode","browser","toBigIntLE_1","toBigIntLE","buf","reversed","reverse","hex","BigInt","toBigIntBE","toBufferLE_1","toBufferLE","num","width","padStart","toBufferBE","u128","bigIntLayout","bigInt","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","POWS_TEN","MAX","bitFloor","n","coeffToString","a","s","z","j","r","charCodeAt","compare","x","y","xc","c","yc","k","l","intCheck","min","max","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","alphabet","caseChanged","isNum","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","format","rm","id","c0","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","dp","rand","Uint32Array","splice","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","sign","callerIsToString","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","Symbol","toStringTag","for","WAD","decimalLayout","bool","boolLayout","publicKey","publicKeyLayout","PublicKey","toBuffer","u64","BNLayout","i64","i128","signed","toTwos","toArrayLike","BN","fromTwos","option","OptionLayout","coption","COptionLayout","vec","VecLayout","data","bytes","BytesLayout","utf8Str","Utf8StringLayout"],"mappings":"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"}